// 122. 买卖股票的最佳时机 II
// https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/

//“贪心算法” 在每一步总是做出在当前看来最好的选择。
//因此，
//“贪心算法” 和 “动态规划”、“回溯搜索” 算法一样，完成一件事情，是分步决策的；
//“贪心算法” 在每一步总是做出在当前看来最好的选择，我是这样理解 “最好” 这两个字的意思：
//“最好” 的意思往往根据题目而来，可能是 “最小”，也可能是 “最大”；
//贪心算法和动态规划相比，它既不看前面（也就是说它不需要从前面的状态转移过来），也不看后面（无后效性，后面的选择不会对前面的选择有影响），因此贪心算法时间复杂度一般是线性的，空间复杂度是常数级别的。
//这道题 “贪心” 的地方在于，对于 “今天的股价 - 昨天的股价”，得到的结果有 3 种可能：（1）正数（2）0（3）负数。
//贪心算法的决策是：只加正数。

// O(N) O(1)

class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int ans = 0;
		for (int i = 1; i<prices.size(); i++) {
			if (prices[i] > prices[i-1]) ans += prices[i] - prices[i-1];
		}
		return ans;
	}
};