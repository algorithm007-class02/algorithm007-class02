给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 

 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 

 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 

 示例 1 

 输入 [7,1,5,3,6,4]
输出 7
解释 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
 

 示例 2 

 输入 [1,2,3,4,5]
输出 4
解释 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 

 示例 3 

 输入 [7,6,4,3,1]
输出 0
解释 在这种情况下, 没有交易完成, 所以最大利润为 0。 
 Related Topics 贪心算法 数组


  [121]是买卖一次就收手，这个是买卖后可以再次买卖，但是不能连续买
  接近资金有限，股市平稳波动时求最大化收益的情况
  [121]可以简单贪心，但是这里每次的分段买有可能比从最低价到最高价的收益要大
  如[2,1,5,1,5]
 
  貌似暴力的话，也不太好写


 超哥的贪心算法一次即听懂了
  我们当个无情的股票买卖机器，
  只要新价格大于之前的价格就抛售，并在抛售的同时购入以准备进行下一次抛售
  那么连续累积起来就是最大收益
 
  并且抛售天购入的话，不会存在最后句买入了却不能再抛的情况

leetcode submit region begin(Prohibit modification and deletion)

class Solution122 {
    public int maxProfit(int[] prices) {
        int MaxIncome =0;
        for (int i=1; iprices.length; i++){
            if ((prices[i]-prices[i-1])0){
                MaxIncome+=(prices[i]-prices[i-1]);
            }
        }
        return MaxIncome;
    }
}

  时间复杂度为O(n),空间复杂度为O(1)
  耗时1ms（99%），使用内存39.8M（5%）

leetcode submit region end(Prohibit modification and deletion)
