哈希表的组成主要分为三个部分：
	1. 数组 （键值对的容器）
	2. 链表（解决哈希冲突collision，当发生冲突时，冲突的元素链接到链表上去）
	3. 红黑树 (当链表过长时的平衡、搜索问题，提高效率）

HashMap 支持 K V对为空，而HashTale不支持K V 为空

Put 在执行前用HASH计算下标，如果下标不存在，则不冲突
	tab[i] = newNode(hash, key, value, null);
	如果下标存在则通过链表或者红黑树添加 putTreeVal
	
	首先判断hashtable是否为null，如果为null,则先初始化容量；然后判断头节点是否为null，
    如果为null则插入节点；如果头节点不为空，先判断是按照链表存储还是按照树的结构存储，
    如果是按照树的结构存储则就按照树的插入节点的方法插入，否则按照链表的方式插入。
    在按链表的方式插入时，移动“指针”（即引用），找到链尾，插入节点。
    在移动过程中会判断当前链表的容量与初始阈值的大小，以此来决定要不要转化为树形结构存储。
    当发现key以及存在时，跳出循环，然后按照onlyIfAbsent条件以及该key对应的值是否为null来决定要不要插入节点。
    最后，插入成功返回旧的值，插入失败返回null。
	
	
Get 执行方式为return (e = getNode(hash(key), key)) == null ? null : e.value;
根据Hash判断节点是否为空，如果为空则回空，不为空则取值
getNode方法首先判断HASH是否相同，然后根据KEY查找数组，再遍历数组后的链表或者树

Remove方法
	1. 检查hash
	2. 移除数组
	3. 如果是链表，链表前移


参考链接：
https://blog.csdn.net/wxgxgp/article/details/79228145